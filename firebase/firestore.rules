service cloud.firestore {
  match /databases/{database}/documents {
  
  	match /config/default_settings {
    	allow read;
    }
  
  	// Admin-only user data (cannot modify)
  	match /users/{userId} {
  		allow read: if isOwner(userId);
      
      // Settings are editable only by user
      // PROBLEM: allow despite invalid data
      // match /settings/{document=**} {
      // 	allow read, write: if request.auth.uid == userId;
      // }
      
      match /metadata/{document=**} {
      	allow read, write: if isOwner(userId);
      }
      
      // Immutable snapshots (cannot update or delete)
      match /settings/meals_snapshots/{snapshotId} {
      	allow read: if isOwner(userId);
        allow create: if isOwner(userId) && isValidMealsSnapshot(incomingData());
        
        function isValidMealsSnapshot(mealsSnapshot) {
        	// Non-empty
        	return mealsSnapshot.meals.length > 0
        }
      }
      
      // Diary may be shared
      // TODO: friends, groups, coaches
      match /food_diary/{daysSinceEpoch} {
      	// allow read, write: if request.auth.uid == userId;
      	allow create, update;//: if isValidFoodDiaryDay(incomingData());
        // FIXME: allow create, update: if ;
        // TODO: create validFoodRecord function!
        allow read, delete;
        
        // only need to check non-nullable fields
        function isValidFoodDiaryDay(foodDiaryDay) {
        	return foodDiaryDay.id != "0" && // proper date
          foodDiaryDay.foodRecords.length >= 0 // FIXME: non-empty (what happends when delete all records?)
          // valid mealsSnapshot
          //exists(/databases/$(database)eusers/$(userId)/settings/meals_snapshots/$(foodRecord.mealSnapshotId))
        }
      }
		}
        
  }
  
  function isOwner(userId) {
  	return request.auth.uid == userId
  }
  
  function existingData() {
  	return resource.data
  }
  
  function incomingData() {
  	return request.resource.data
  }
  
}
